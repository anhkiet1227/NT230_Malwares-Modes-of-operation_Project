import os
import numpy as np
import csv
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier

FEATURES_FOLDER = "../data/extracted_features"
PERTURBED_FOLDER = "../data/perturbed_samples"

def load_data():
    # Load features
    X = []
    y = []
    for file_name in os.listdir(FEATURES_FOLDER):
        csv_file_path = os.path.join(FEATURES_FOLDER, file_name)
        with open(csv_file_path, "r") as csv_file:
            reader = csv.reader(csv_file)
            features = next(reader)
            label = 1  # Malware samples are labeled as 1
            X.append(features)
            y.append(label)

    # Load perturbed samples
    X_perturbed = []
    y_perturbed = []
    for file_name in os.listdir(PERTURBED_FOLDER):
        perturbed_file_path = os.path.join(PERTURBED_FOLDER, file_name)
        with open(perturbed_file_path, "rb") as f:
            content = f.read()
            label = 0  # Perturbed samples are labeled as 0
            X_perturbed.append(content)
            y_perturbed.append(label)

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X + X_perturbed, y + y_perturbed, test_size=0.2, random_state=42)

    return X_train, X_test, y_train, y_test

def train_classifier(X_train, y_train):
    # Train a random forest classifier
    clf = RandomForestClassifier(n_estimators=100, random_state=42)
    clf.fit(X_train, y_train)
    return clf

def evaluate(X_test, y_test, clf):
    # Make predictions on the test set
    y_pred = clf.predict(X_test)

    # Compute accuracy
    accuracy = accuracy_score(y_test, y_pred)
    print("Accuracy:", accuracy)

    # Compute confusion matrix
    tp = np.sum(np.logical_and(y_test == 1, y_pred == 1))
    fp = np.sum(np.logical_and(y_test == 0, y_pred == 1))
    tn = np.sum(np.logical_and(y_test == 0, y_pred == 0))
    fn = np.sum(np.logical_and(y_test == 1, y_pred == 0))
    print("Confusion matrix:")
    print("     Predicted")
    print("      |  1  |  0  |")
    print("True  |-----|-----|")
    print(f"   1  | {tp:4d} | {fn:4d} |")
    print(f"   0  | {fp:4d} | {tn:4d} |")

def main():
    # Load data
    X_train, X_test, y_train, y_test = load_data()

    # Train classifier on training set
    clf = train_classifier(X_train, y_train)

    # Evaluate classifier on testing set
    evaluate(X_test, y_test, clf)

if __name__ == "__main__":
    main()